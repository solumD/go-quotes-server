// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/solumD/go-quotes-server/internal/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteQuote mocks base method.
func (m *MockService) DeleteQuote(ctx context.Context, quoteID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuote", ctx, quoteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuote indicates an expected call of DeleteQuote.
func (mr *MockServiceMockRecorder) DeleteQuote(ctx, quoteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuote", reflect.TypeOf((*MockService)(nil).DeleteQuote), ctx, quoteID)
}

// GetAllQuotes mocks base method.
func (m *MockService) GetAllQuotes(ctx context.Context) ([]*model.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuotes", ctx)
	ret0, _ := ret[0].([]*model.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuotes indicates an expected call of GetAllQuotes.
func (mr *MockServiceMockRecorder) GetAllQuotes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuotes", reflect.TypeOf((*MockService)(nil).GetAllQuotes), ctx)
}

// GetQuotesByAuthor mocks base method.
func (m *MockService) GetQuotesByAuthor(ctx context.Context, quoteAuthor string) ([]*model.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotesByAuthor", ctx, quoteAuthor)
	ret0, _ := ret[0].([]*model.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotesByAuthor indicates an expected call of GetQuotesByAuthor.
func (mr *MockServiceMockRecorder) GetQuotesByAuthor(ctx, quoteAuthor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotesByAuthor", reflect.TypeOf((*MockService)(nil).GetQuotesByAuthor), ctx, quoteAuthor)
}

// GetRandomQuote mocks base method.
func (m *MockService) GetRandomQuote(ctx context.Context) (*model.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote", ctx)
	ret0, _ := ret[0].(*model.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockServiceMockRecorder) GetRandomQuote(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockService)(nil).GetRandomQuote), ctx)
}

// SaveQuote mocks base method.
func (m *MockService) SaveQuote(ctx context.Context, quoteText, quoteAuthor string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveQuote", ctx, quoteText, quoteAuthor)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveQuote indicates an expected call of SaveQuote.
func (mr *MockServiceMockRecorder) SaveQuote(ctx, quoteText, quoteAuthor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveQuote", reflect.TypeOf((*MockService)(nil).SaveQuote), ctx, quoteText, quoteAuthor)
}
